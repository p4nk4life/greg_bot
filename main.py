import asyncio
import logging
import sys
from os import getenv
from datetime import datetime
import time
import schedule

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from keyboards.main_kb import main_kb, admin_kb
from states.main_states import Main
from database.db import get_all_tg_ids, set_time_sub, add_user, get_sub_status
from yokass.linknid import check, create

TOKEN = "7239822620:AAHROpIE3EGdB3iOIfywnDEq6RLGBkZAW0M"

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

list_admins = [6157416760, 6639790624, 5436978766, 6864449629]

CHANNEL_ID = -1002195056770

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    print(get_all_tg_ids())
    add_user(message.from_user.id)

    if message.from_user.id not in list_admins:
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ /start', reply_markup=main_kb)
    else:
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ /start', reply_markup=admin_kb)


async def check_channel_members():
    member_ids = get_all_tg_ids()

    for member in member_ids:
        if member in list_admins:
            continue

        tg_id = member
        if not get_sub_status(tg_id):
            payment_url, payment_id = create(1, tg_id)

            payment_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url)],
            [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_{payment_id}')]
            ])
            await bot.ban_chat_member(CHANNEL_ID, tg_id)
            await bot.send_message(chat_id = tg_id, text='–£ –≤–∞—Å –∏—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.', reply_markup=payment_kb)


def schedule_checks():
    schedule.every().day.at("00:00").do(lambda: asyncio.run(check_channel_members()))

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)


@dp.message(F.text == '–û—Ç–∑—ã–≤—ã')
async def reviews(message: Message) -> None:
    await message.answer(text='https://t.me/D2Svip_feedback\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤')


@dp.message(F.text == '–ö—É—Ä—Å ¬•')
async def rates(message: Message) -> None:
    f = open('bd.txt')
    rates = f.read()
    f.close
    await message.answer(text=f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: <b>{rates}</b>')


@dp.message(F.text == '–õ–æ–≥–∏—Å—Ç–∏–∫–∏')
async def logist(message: Message) -> None:
    await message.answer(text='''–º–∞—à–∏–Ω–∞ 10-12 –¥–Ω–µ–π üöö ( 790 —Ä—É–±–ª–µ–π/–∫–≥ )
–∞–≤–∏–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ 3-5 –¥–Ω–µ–π ‚úàÔ∏è ( 1800/–∫–≥ )
—Å—É–ø–µ—Ä-—ç–∫—Å–ø—Ä–µ—Å—Å 48 —á–∞—Å–æ–≤ üöÄ ( 2000/–∫–≥ )
''')


@dp.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ')
async def info_about_channel(message: Message) -> None:
    await message.answer(text='''### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏ D2Svip üì¶

–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å –Ω–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π! –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å Poizon –∏ –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: ‚úÖ

- –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –≤–∞—Å –∂–¥—É—Ç –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏ –ø–æ –∑–∞–∫–∞–∑—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –æ—Å–≤–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è.

- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–µ—Å–µ–ª–ª–µ—Ä–æ–≤: üëü –ù–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ—Å–µ–ª–ª–µ—Ä–æ–≤. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:
  - –ú–∞—à–∏–Ω–∞: 10-12 –¥–Ω–µ–π üöö
  - –≠–∫—Å–ø—Ä–µ—Å—Å –∞–≤–∏–∞: 3-5 –¥–Ω–µ–π ‚úàÔ∏è
  - –°—É–ø–µ—Ä —ç–∫—Å–ø—Ä–µ—Å—Å: 48 —á–∞—Å–æ–≤ üöÄ
  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è!

- –í—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –≤–∞–ª—é—Ç: üí∏ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞—à–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–±–º–µ–Ω –≤–∞–ª—é—Ç —Å –ª—É—á—à–∏–º –∫—É—Ä—Å–æ–º —é–∞–Ω—è –Ω–∞ —Ä—ã–Ω–∫–µ (–Ω–∞ 06.09.2024 –∫—É—Ä—Å 12.4). –¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –≤—ã –Ω–µ –Ω–∞–π–¥—ë—Ç–µ –Ω–∏–≥–¥–µ!

- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∫—É–ø–∞: –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –∑–Ω–∞—á–∫–æ–º (‚âà) –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω, –ø–æ–ª—å–∑—É—è—Å—å –Ω–∞—à–∏–º–∏ –æ—Å–æ–±—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏. üá∫üá∏

- –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏: –ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è –∑–∞–±–æ—Ç—É –æ –¥–æ—Å—Ç–∞–≤–∫–µ. –í—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Äî –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É. –ú—ã –¥–æ—Å—Ç–∞–≤–∏–º —Ç–æ–≤–∞—Ä –≤–∞–º –∏–ª–∏ –≤–∞—à–µ–º—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –°–î–≠–ö. üåê

- –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ D2Svip support –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞—Å–∞—é—â–∏–º–∏—Å—è –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏. 

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ D2Svip –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–≥–æ–¥–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!

–° –Ω–∞–º–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
- –õ—É—á—à–∏–µ —Ü–µ–Ω—ã üí≤
- –ë—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É üöÄ
- –ü–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É ü§ù

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞—à –±–∏–∑–Ω–µ—Å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! üì¶
''')


@dp.message(F.text == '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø 490—Ä/–º–µ—Å—è—Ü')
async def buy(message: Message) -> None:
    payment_url, payment_id = create(1, message.from_user.id)

    payment_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url)],
    [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_{payment_id}')]
    ])
    
    await message.answer(text='–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É —Ç–æ–≤–∞—Ä–æ–≤, –∞ —Ç–∞–∫ –∂–µ –≤—Å–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ ( –≤–∫–ª—é—á–∞—è —ç–∫—Å–ø—Ä–µ—Å—Å 48 —á–∞—Å–æ–≤ ) –∏ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç', reply_markup=payment_kb)


@dp.callback_query(lambda c: 'check' in c.data)
async def check_handler(callback: CallbackQuery):
    result = check(callback.data.split('_')[-1])
    if not result:
        await callback.message.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
    else:
        await bot.unban_chat_member(chat_id = CHANNEL_ID, user_id = callback.from_user.id, only_if_banned=True)
        time_sub = int(time.time()) + 2592000
        set_time_sub(tg_id=callback.from_user.id, time_sub=time_sub)
        link = await bot.create_chat_invite_link(chat_id = CHANNEL_ID, member_limit=1)
        await callback.message.answer(f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{link.invite_link}')

@dp.message(F.text == '–ó–∞–¥–∞—Ç—å –∫—É—Ä—Å ¬•')
async def set_rates(message: Message, state: FSMContext) -> None:
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:')
    await state.set_state(Main.exchange_rate)


@dp.message(Main.exchange_rate)
async def get_rates(message: Message, state: FSMContext) -> None:
    f = open('bd.txt', 'w')
    f.write(message.text)
    f.close()
    await message.answer(text='–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
    await state.set_state(Main.default)


async def main() -> None:
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(scheduler())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    schedule_checks()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    asyncio.run(main())